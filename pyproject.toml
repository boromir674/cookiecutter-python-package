
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

### NEW ###
# [project]
# name = "cookiecutter-python"
### ... ###

### OLD ###
# this integrates with 'pip install', 'python -m build' and 'poetry <CMD>'
[tool.poetry]
name = "cookiecutter_python"
### ... ###

version = "2.5.4"
description = "1-click Generator of Python Project, from Template with streamlined \"DevOps\" using a powerful CI/CD Pipeline."
readme = "README.rst"
license = "AGPL-3.0-only"

# OLD
authors = ["Konstantinos Lampridis <k.lampridis@hotmail.com>"]
maintainers = ["Konstantinos Lampridis <k.lampridis@hotmail.com>"]

# NEW
# authors = [{"name" = "Konstantinos Lampridis", "email" = "k.lampridis@hotmail.com"}]
# maintainers = [{"name" = "Konstantinos Lampridis", "email" = "k.lampridis@hotmail.com"}]

include = [
    { path = "tests", format = "sdist" },
    { path = "tests/data", format = "sdist" },
    { path = "tests/generator_defaults_shift", format = "sdist" },
    # { path = "docs/**/*.rst", format = "sdist" },
    # { path = "docs/conf.py", format = "sdist" },
    { path = "src/**/*.typed", format = "sdist" },
    { path = "src/stubs/*.pyi", format = "sdist" },
    # TODO: find how to distribute cookiecutter-python-types
    # because path = "src/stubs/*.pyi" does not work
    "pyproject.toml",
    "LICENSE",
    "README.rst",
    "CONTRIBUTING.md",
    "CHANGELOG.rst",
    # "Dockerfile",
]
exclude = [
    "docs/*",
    "requirements/*",
    "scripts/*.py",
    "tox.ini",
    ".circleci/config.yml",
    ".coveragerc",
    ".DS_Store",
    ".gitignore",
    ".prospector.yml",
    ".pylintrc",
    ".readthedocs.yml",
    ".scrutinizer.yml",
    ".travis.yml"
]

[tool.poetry.scripts]
generate-python = 'cookiecutter_python.cli:main'

# this integrates ONLY with uv
[project]
authors = [
    {name = "Konstantinos Lampridis", email = "k.lampridis@hotmail.com"},
]
maintainers = [
    {name = "Konstantinos Lampridis", email = "k.lampridis@hotmail.com"},
]
license = {text = "AGPL-3.0-only"}

name = "cookiecutter_python"
version = "2.5.4"
description = "1-click Generator of Python Project, from Template with streamlined \"DevOps\" using a powerful CI/CD Pipeline."
readme = "README.rst"
# keywords = []
# classifiers = []


#### ALLOWED PYTHON ####
requires-python = ">=3.8, <3.13"

## Prod DEPENDENCIES ##
dependencies = [
    "click<9,>=8",
    "cookiecutter<3.0.0,>=2.1.1",
    "software-patterns<2.0.0,>=1.3.0",
    "requests-futures<2.0.0,>=1.0.0",
    "gitpython<4.0.0,>=3.1.30; python_version < \"3.13\" and python_version >= \"3.7\"",
    "questionary<2.0.0,>=1.10.0",
    "attrs<22.0.0,>=21.4.0",
    "pyyaml<7.0,>=6.0",
    "rich<14.0.0,>=13.0.0; python_version < \"3.13\" and python_version >= \"3.7\"",
    "jinja2-time<1.0.0,>=0.2.0",
    "packaging<23,>=22",
]

[project.optional-dependencies]
test = [
    "pytest<8.0.0,>=7.2.0; python_version < \"3.13\" and python_version >= \"3.7\"",
    "pytest-object-getter<2.0.0,>=1.0.1",
    "pytest-click~=1.1.0",
    "pytest-cov>=2.12",
    "pytest-explicit~=1.0.1",
    "pytest-xdist>=1.34",
    "pytest-run-subprocess==0.9.0",
    "pytest-requests-futures==0.9.0",
    "build>=1.2.2.post1",
]
docs = [
    "sphinx~=6.0; python_version < \"3.13\" and python_version >= \"3.8\"",
    "sphinx-autodoc-typehints>=1.10",
    "sphinx-rtd-theme==0.5.0",
    "sphinxcontrib-spelling~=7.3.3",
    "sphinx-inline-tabs<2024.0.0,>=2023.4.21; python_version < \"3.13\" and python_version >= \"3.8\"",
    "sphinxcontrib-mermaid<1.0.0,>=0.9.2; python_version < \"3.13\" and python_version >= \"3.7\"",
    "myst-parser<4.0.0,>=3.0.0; python_version >= \"3.10\" and python_version < \"3.13\"",
    "markdown-it-py==3.0.0; python_version < \"3.13\" and python_version >= \"3.8\"",
]
docslive = [
    "myst-parser>=3.0.1,<5.0.0",
    "sphinx-autobuild<2022.0.0,>=2021.3.14",
    "sphinx-inline-tabs==2023.4.21",
    "sphinxcontrib-mermaid==0.9.2",
    "sphinxcontrib-spelling >=7.3.3 , <8.0.0",
    "tornado<7.0.0,>=6.3.3; python_version < \"3.13\" and python_version >= \"3.8\"",
]
typing = [
    "types-requests~=2.27.26",
    "types-pyyaml<7.0.0.0,>=6.0.12.5",
    "mypy==1.2.0",
    "pytest>=7.4.4",
]

[project.scripts]
generate-python = "cookiecutter_python.cli:main"

# [project.urls]




#### PIP INSTALL EXTRAS - Integration ####
# enables pip install -e 'cookiecutter-python[test]'
[tool.poetry.extras]
test = [
    "pytest",
    "pytest-run-subprocess",
]


#### TOOLS - Non UV / POETRY ####

### Pytest & Plugins ###

[tool.pytest.ini_options]
minversion = "6.2"
# hard-inject args, when invoking `pytest` CLI
addopts = "--strict-markers --ignore=tests/data"
testpaths = [
    "tests",
]
markers = [
    "slow: Marks a slow test",
    "integration: Tests applicable to a newly Generated Project, running with tox",
    "network_bound: Require internet connection",
    "requires_uv: Tests that need to execute the uv binary",
]
# for explict --run-integration -> pip install pytest-explicit
explicit-only = [
    "integration",
    "network_bound",
    "slow",
    "requires_uv",
]


### BANDIT

[tool.bandit]
exclude_dirs = ["tests/data", "path/to/file"]
tests = []
skips = [
    "B101",
]

[tool.black]
line-length = 95
include = '\.pyi?$'
extend-exclude = '''
'''


[tool.isort]
profile = 'black'
lines_after_imports = 2



### MUTATION TESTS ###
[tool.mutmut]
tests_dir = "tests/"
runner = "python -m pytest -n auto"

paths_to_mutate = "src/cookiecutter_python/utils.py"

