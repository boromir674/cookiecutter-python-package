#################################
## PYTHON STATIC CODE ANALYSIS ##
##      Reusable Workflow      ##
#################################

# Static Code Analysis (SCA) is a set of techniques for examining source code
# without executing it.

on:
  workflow_call:
    inputs:
      # Allow top-level workflow to decide if this job should run
      enable_job:
        required: false
        type: boolean
        default: true
      allow_failure:
        required: false
        description: 'Allow this job to fail'
        type: boolean
        default: false
      force_styles:
        required: false
        description: 'Force styles to be applied'
        type: boolean
        default: true
      ## Parametrizing Runtime Environment (ie py version)
      python_version:
        required: false
        description: 'Python runtime version to use'
        type: string
        default: '3.10'
      ## Parametrizing Code Analysis Acceptance Criteria
      pylint_threshold:
        required: false
        type: string
        default: '8.0'  # out of 10
    # secrets
    # outputs


jobs:
  lint:
    name: "Static Code Analysis"
    runs-on: ubuntu-latest
    if: inputs.enable_job == true
    env:
      LINT_ARGS: "tests src/cookiecutter_python/backend src/cookiecutter_python/handle scripts"
      LINT_EXCLUDES: 'tests/data/snapshots'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      ## Ruff ##
      - name: 'Ruff: Require Project to pass Ruff Checks'
        run: uvx ruff check "${{ env.LINT_ARGS }}"

      ## Isort ##
      - name: 'Isort: Require Semantic and Alphabetic order of the Python Imports'
        if: always() && ${{ matrix.platform != 'windows-latest' }}
        run: uvx isort --skip ${{ env.LINT_EXCLUDES }} --check "${{ env.LINT_ARGS }}"

      ## Black ##
      - name: 'Black: Require Project Style to be followed by the Python Code'
        if: always() && ${{ matrix.platform != 'windows-latest' && inputs.force_styles == 'true' }}
        run: uvx black --check --skip-string-normalization --exclude ${{ env.LINT_EXCLUDES }} --config pyproject.toml "${{ env.LINT_ARGS }}"

      ## Pyflakes, Pyroma, McCabe, DodgyRun, Profile Validator ##
      - name: Run prospector on application source code 
        if: always() && ${{ matrix.platform != 'windows-latest' }}
        run: uvx prospector[with_pyroma] src

      - name: Run prospector on test source code 
        if: always() && ${{ matrix.platform != 'windows-latest' }}
        run: uvx prospector[with_pyroma] tests

      ## Bandit ##
      - name: Run Bandit for Security Analysis
        if: always()
        run: |
          uv venv
          uv pip install 'bandit[toml]' 'bandit-sarif-formatter==1.1.1'
          uv run bandit -r -c pyproject.toml ${{ env.LINT_ARGS }}
