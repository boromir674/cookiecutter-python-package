#################################
## PYTHON STATIC CODE ANALYSIS ##
##      Reusable Workflow      ##
#################################

# Static Code Analysis (SCA) is a set of techniques for examining source code
# without executing it.

on:
  workflow_call:
    inputs:
      # Allow top-level workflow to decide if this job should run
      enable_job:
        required: false
        type: boolean
        default: true
      allow_failure:
        required: false
        description: 'Allow this job to fail'
        type: boolean
        default: false
      force_styles:
        required: false
        description: 'Force styles to be applied'
        type: boolean
        default: true
      ## Parametrizing Runtime Environment (ie py version)
      python_version:
        required: false
        description: 'Python runtime version to use'
        type: string
        default: '3.10'
      ## Parametrizing Code Analysis Acceptance Criteria
      bandit:
        required: false
        description: 'Bandit severity thresholds'
        type: string
        default: '{"h": 1, "m": 2, "l": 4}'  # JSON format
      pylint_threshold:
        required: false
        type: string
        default: '8.0'  # out of 10
    # secrets
    # outputs


jobs:
  lint:
    name: "Static Code Analysis"
    runs-on: ubuntu-latest
    if: inputs.enable_job == true
    env:
      LINT_ARGS: "tests src/cookiecutter_python/backend src/cookiecutter_python/handle scripts"
      LINT_EXCLUDES: 'tests/data/snapshots'
      _TEMPLATE_DIR: 'src/cookiecutter_python/{{ cookiecutter.project_slug }}'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      ## Ruff ##
      - name: 'Ruff: Require Project to pass Ruff Checks'
        run: uvx ruff check --extend-exclude 'src/cookiecutter_python/\{\{\ cookiecutter.project_slug\ \}\}' ${{ env.LINT_ARGS }}

      ## Isort ##
      - name: 'Isort: Require Semantic and Alphabetic order of the Python Imports'
        if: always()
        shell: bash
        run: |
          uvx --with 'isort>=5.12.0, <6.0.0' isort --check \
            --skip ${{ env.LINT_EXCLUDES }} \
            --skip '${{ env._TEMPLATE_DIR }}' \
            src tests scripts

      ## Black ##
      - name: 'Black: Require Project Style to be followed by the Python Code'
        if: always()
        shell: bash
        run: |
          uvx --with 'black>=23.3.0, <24.0.0' black --check \
            --skip-string-normalization \
            --exclude ${{ env.LINT_EXCLUDES }} \
            --extend-exclude '${{ env._TEMPLATE_DIR }}' \
            --config pyproject.toml src tests scripts

        # run: uvx black --check --skip-string-normalization --exclude ${{ env.LINT_EXCLUDES }} --config pyproject.toml ${{ env.LINT_ARGS }}

      ## Pyflakes, Pyroma, McCabe, DodgyRun, Profile Validator ##
      - name: Run prospector on application source code 
        if: always()
        run: uvx prospector[with_pyroma] src

      - name: Run prospector on test source code 
        if: always()
        run: uvx prospector[with_pyroma] tests

      ## Bandit ##
    #   - name: Run Bandit for Security Analysis
    #     if: always()
    #     run: |
    #       uv venv
    #       uv pip install 'bandit[toml]' 'bandit-sarif-formatter==1.1.1'
    #       . .venv/bin/activate
    #       bandit -r -c pyproject.toml -x 'src/cookiecutter_python/{{ cookiecutter.project_slug }}/' src
    # continue-on-error: ${{ inputs.allow_failure }}


  ### BANDIT - Analysis ###
  bandit:
    name: "Bandit: Security Analysis"
    runs-on: ubuntu-latest
    env:
      _SARIF_FILE: results-sarif.json
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          uv venv
          uv pip install 'bandit[toml]' 'bandit-sarif-formatter==1.1.1'

      ## Run BANDIT to identify CWEs ##
      - name: 'Bandit: Security Analysis'
        run: |
          . .venv/bin/activate
          bandit -r -c pyproject.toml -q -f sarif -o "${{ env._SARIF_FILE }}" src tests || 'true'

      - name: Upload artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{ env._SARIF_FILE }}
          path: ${{ env._SARIF_FILE }}
          if-no-files-found: error

      - uses: github/codeql-action/init@v3
        with:
          # config-file: ./.github/codeql/codeql-config.yml  # or ${{ vars.VAR_CONTENT }} !
          config: |
            paths-ignore:
              - 'src/cookiecutter_python/{{ cookiecutter.project_slug }}/'
              - 'src/cookiecutter_python/{{ cookiecutter.project_slug }}/**'
              - 'src/cookiecutter_python/{{ cookiecutter.project_slug }}/**/*'
              - 'src/cookiecutter_python/{{ cookiecutter.project_slug }}/*'
              - 'src/cookiecutter_python/{{ cookiecutter.project_slug }}/tests/test_cli.py'

            # disable-default-queries: true
            # queries:
            #   - uses: security-extended

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env._SARIF_FILE }}

      - name: 'Parse Bandit Results, and prepare comparing LOW, MEDIUM, and HIGH'
        run: |
          # Parse Totals Object
          TOTALS=$(jq '.runs[0].properties.metrics._totals' "${{ env._SARIF_FILE }}")

          # Find CWE's of HIGH Severity
          HIGH=$(echo $TOTALS | jq '.["SEVERITY.HIGH"]')

          # Find CWE's of MEDIUM Severity
          MEDIUM=$(echo $TOTALS | jq '.["SEVERITY.MEDIUM"]')

          # Find CWE's of LOW Severity
          LOW=$(echo $TOTALS | jq '.["SEVERITY.LOW"]')

          # Report and Env
          echo HIGH=$HIGH >> $GITHUB_ENV
          echo MEDIUM=$MEDIUM >> $GITHUB_ENV
          echo LOW=$LOW >> $GITHUB_ENV

      - name: Write to Job Step Summary
        run: |
          echo "## Bandit - Results" >> $GITHUB_STEP_SUMMARY
          echo "HIGH: $HIGH" >> $GITHUB_STEP_SUMMARY
          echo "MEDIUM: $MEDIUM" >> $GITHUB_STEP_SUMMARY
          echo "LOW: $LOW" >> $GITHUB_STEP_SUMMARY

      - name: Destructure Input Acceptance Thresholds
        run: |
          MAX_HIGH=$(echo '${{ inputs.bandit }}' | jq -r '.h')
          MAX_MEDIUM=$(echo '${{ inputs.bandit }}' | jq -r '.m')
          MAX_LOW=$(echo '${{ inputs.bandit }}' | jq -r '.l')

          echo "## User Acceptable - Thresholds" >> $GITHUB_STEP_SUMMARY
          echo "HIGH: $MAX_HIGH" >> $GITHUB_STEP_SUMMARY
          echo "MEDIUM: $MAX_MEDIUM" >> $GITHUB_STEP_SUMMARY
          echo "LOW: $MAX_LOW" >> $GITHUB_STEP_SUMMARY

          echo MAX_HIGH=$MAX_HIGH >> $GITHUB_ENV
          echo MAX_MEDIUM=$MAX_MEDIUM >> $GITHUB_ENV
          echo MAX_LOW=$MAX_LOW >> $GITHUB_ENV

      #### JOB STATUS ####
      - name: "If we found more than ${{ env.MAX_HIGH }} HIGH Severity CWE's, Fail!"
        if: ${{ env.MAX_HIGH < env.HIGH }}
        run: |
          echo "Bandit Failed! | Found more HIGH Severity CWE's in code than allowed/acceptable amount."
          echo "[ERROR] **HIGH**: $HIGH > $MAX_HIGH" >> $GITHUB_STEP_SUMMARY
          exit 1

      - name: "If we found more than ${{ env.MAX_MEDIUM }} MEDIUM Severity CWE's, Fail!"
        if: ${{ env.MAX_MEDIUM < env.MEDIUM }}
        run: |
          echo "Bandit Failed! | Found more MEDIUM Severity CWE's in code than allowed/acceptable amount."
          echo "[ERROR] **MEDIUM**: $MEDIUM > $MAX_MEDIUM" >> $GITHUB_STEP_SUMMARY
          exit 1

      - name: "If we found more than ${{ env.MAX_LOW }} LOW Severity CWE's, Fail!"
        if: ${{ env.MAX_LOW < env.LOW }}
        run: |
          echo "Bandit Failed! | Found more LOW Severity CWE's in code than allowed/acceptable amount."
          echo "[ERROR] **LOW**: $LOW > $MAX_LOW" >> $GITHUB_STEP_SUMMARY
          exit 1

      - run: echo "**Bandit Passed!**" >> $GITHUB_STEP_SUMMARY
