################################
## Docs Readme Publish ##
##     Reusable Workflow      ##
################################

# 1. Gets state on tagged commit
# 2. creates an empemeral branch
# 3. pushes the empemeral branch to GitHub
# 4. creates a PR from empemeral branch to docs-auto branch
# 5. merges the PR into docs-auto branch, on successful Docs Build
# 6.  Deletes the empemeral branch

###### Quick Release Tagging #######
# export tt='quick-release'; git tag -d "$tt"; git push --delete origin "$tt"; git tag "$tt" && git push origin "$tt"
##############   OR   ##############
# export tt='quick-release'
# git tag -d "$tt"
# git push --delete origin "$tt"
# git tag "$tt"
# git push origin "$tt"
####################################

# PR: empemeral-doc-updates --> docs-auto

# Trigger only on push of a 'quick-release' tag, on any branch
on:
  # on tag with name 'quick-release' only
  push:
    tags:
      - quick-release


jobs:
  release_readme:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Add repository path as safe.directory for Git global config by running `git
          # config --global --add safe.directory <path>`
          # Default: true
          set-safe-directory: ''

      - run: git log --graph --decorate --color --all --stat

      # pushed tag that we checkout is not a branch, so we need to create a branch
      - run: git checkout -b empemeral-doc-updates
      - run: git push -u origin HEAD

      - run: git log --graph --decorate --color --all --stat

      # here Codacy does not trigger, because branch does not have more than 2 commits over that past 2 weeks
      # see: https://docs.codacy.com/repositories-configure/managing-branches/

      - name: Create Pull Request
        # --head is the branch where the changes were developed
        # --base is the branch you want to merge the changes into
        run: |
          gh pr create --head empemeral-doc-updates --base docs-auto  \
            --title "Documentation Updates - Merge to Dedicated Branch" \
            --body "This PR is automatically generated by a GitHub Action workflow. \
            It contains documentation updates that were pushed to the 'quick-release' tag. \
            The workflow will merge this PR into the 'docs-auto' branch, which will \
            trigger a new build of the documentation site. \
            \n\n\
            Please do not close this PR manually."

      - name: 'Merge Pull Request into docs-auto and delete empemeral-doc-updates Branch'

      # gh pr merge          :  If required checks have not yet passed, AutoMerge will be enabled.

      #   --auto             :  Automatically merge only after necessary requirements are met
      #   -s, --squash       :  Squash the commits into one commit and merge it into the base branch
      #   -d, --delete-branch:  Delete the local and remote branch after merge

        run: |
          gh pr merge empemeral-doc-updates --auto --delete-branch --squash
      
      # Due to --delete-branch, our local HEAD is now in auto-docs (which is up-to-date with upstream)
      # Local branch empemeral-doc-updates is deleted

      - run: git fetch
      - run: git log --graph --decorate --color --all --stat
      - run: echo "Expect above log to proove local and origin empemeral-doc-updates branches are deleted"

    #### WORKFLOW 2 EMBEDDED HERE ####
      - run: git checkout docs-auto
      - run: git branch -D empemeral-doc-updates || echo "Branch empemeral-doc-updates does not exist"
      - run: git pull origin docs-auto
      - run: git checkout master

      - run: git log --graph --decorate --color --all --stat

      ### PR: Head 'auto-docs' --> Base 'release' ###
      - name: Create Pull Request
        # --head is the branch where the changes were developed
        # --base is the branch you want to merge the changes into
        run: |
          gh pr create --head docs-auto --base release  \
            --title "Documentation Release Candidate - Merging to 'release' branch" \
            --body "This PR is automatically generated by a GitHub Action workflow. \
            It contains documentation updates that were pushed to the 'docs-auto' branch. \
            The workflow will merge this PR into the 'release' branch, which will \
            trigger opening a PR from release to master. \
            \n\n\
            Please do not close this PR manually."

      # NOTE: For the below to work release branch MUST be at master, because due to absence of protection rules
      # Merging is not done due to not linear history, and the PR is closed

      # error also can happen if pull request already exists, due to insufficient clean up, prior

      # MERGE  'auto-docs' --> Base 'release' + Delete auto-docs#
      # try with delete to prevent Codacy check, which fails, due there is nothing to analyze
      # if not works, try removing squash 
      - name: 'Merge Pull Request into release branch'
        run: |
          gh pr merge docs-auto --rebase

      - run: git log --graph --decorate --color --all --stat

      - run: git fetch origin release
      - run: git checkout release

      - run: git log --graph --decorate --color --all --stat

      ### PR: Head 'release' --> Base 'master' ###
      - name: Create Pull Request
        run: |
          gh pr create --head release --base master  \
            --title "Documentation Release - Preparing to Merge into 'master' branch" \
            --body "This PR is automatically generated by a GitHub Action workflow. \
            It contains Documentation Updates that were pushed to the 'release' branch. \
            \n\n\
            To verify Docs CI Build passed, see the PR's 'Checks Section', in this web UI \
            \n\n\
            Next, steps if needed should be: \
            \n\n\
            1. Verify only docs/ folder or mkdocs.yml file where changed, excluding commits that might happen after this PR had opened \
            \n\n\
            2. Update, commit, and push below files to br release, to Bump Sem Ver for new Release \n \
              - README.rst\n \
              - src/cookiecutter_python/__init__.py\n \
              - pyproject.toml\n \
              - docs/conf.py\n \
            \n\n\
            3. Update, commit, and push CHNAGELO.rst, with new release info \n \
            "

