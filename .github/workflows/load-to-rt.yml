###########################
## Onboard Release Train ##
###########################

### TRIGGER event ###
# export tt='onboard-rt'; git tag -d "$tt"; git push --delete origin "$tt"; git tag "$tt" && git push origin "$tt"


# PR: HEAD --> release-train


# Trigger only on push of an 'board-rt' tag
on:
  push:
    tags:
      # on tag with name 'board-rt' only
      - board-rt

jobs:
  board_release_train:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TRAIN: 'release-train'
      BOARDING: 'boarding'
      MAIN_BRANCH: 'master'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 0 indicates all history for all branches and tags.
          set-safe-directory: ''  # `git config --global --add safe.directory <path>`
          token: '${{ secrets.GH_TOKEN }}'

      - run: git log --graph --decorate --color --all --stat

      - name: Discover User's Branch Name
        id: user_branch
        run: |
          name=$(git branch -a --contains "$(git rev-parse HEAD)" | \
            sed -n '2p' | \
            sed 's/.*remotes\///')

          echo "NAME:" $name

          echo USER_BRANCH=$name >> $GITHUB_OUTPUT

      ### Put User Branch on Boarding Branch to Test before merging to Release Train

      - run: git checkout ${{ env.MAIN_BRANCH }}
      - run: git checkout -b ${{ env.BOARDING }}

      - run: git config --global user.email "k.lampridis@hotmail.com"
      - run: git config --global user.name "Konstantinos Lampridis"

      - name: 'Merge   ${{ steps.user_branch.outputs.USER_BRANCH }}  -->  ${{ env.BOARDING }}'
        run: git merge "${{ steps.user_branch.outputs.USER_BRANCH }}" --no-edit --no-ff -m "${MERGE_MSG}"
        env:
          MERGE_MSG: "Carry User's Code, and do Boarding CI Tests"  # triggers Boarding CI Tests
          # MERGE_MSG: "Carry User's Code"  # skip Boarding CI Tests

      # Push Boarding and Trigger CI Tests on the 'CI/CD Pipeline'
      - run: git push -u origin HEAD

      ### Release Train - Setup ###
      - run: echo UPSTREAM_TRAIN="$(git ls-remote --heads origin '${{ env.TRAIN }}')" >> $GITHUB_ENV
      - id: remote_train
        run: |
          if [[ -z "${{ env.UPSTREAM_TRAIN }}" ]]; then
            echo TRAIN_EXISTS=false >> $GITHUB_OUTPUT
            echo "[INFO] TRAIN DOES NOT EXIST"
          else
            echo TRAIN_EXISTS=true >> $GITHUB_OUTPUT
            echo "[INFO] TRAIN EXISTS"
          fi

      # if Release Train does not exist, create it
      - name: If Upstream Release Train branch does not exist, create it
        if: ${{ ! steps.remote_train.outputs.TRAIN_EXISTS }}
        run: |
          git checkout ${{ env.MAIN_BRANCH }}
          git checkout -b ${{ env.TRAIN }}
          git push -u origin HEAD

      ### Release Train - Check ###
      - name: "Verify 'release-train' is found in list of local branches"
        run: |
          git branch --list
          git branch --list | grep ${{ env.TRAIN }}
          if [[ $? -ne 0 ]]; then
            echo "[ERROR] Failed to setup Release Train !"
            exit 1
          fi

      - run: git log --graph --decorate --color --all --stat

      ############## PR ##############
      - name: 'Create PR   ${{ env.BOARDING }}  -->  ${{ env.TRAIN }}'
        # --head is the branch where the changes were developed
        # --base is the branch you want to merge the changes into
        run: |
          gh pr create --head "${{ env.BOARDING }}" --base "${{ env.TRAIN }}" \
            --title "Boarding '${{ steps.user_branch.outputs.USER_BRANCH }}' on Release Train - Merging into ${{ env.TRAIN }} Branch" \
            --body "## :train: Boarding onto the Release Train :train:

          This PR is automatically generated by a GitHub Action workflow. It's part of the process of boarding changes onto the **Release Train** branch, setting the stage for the next steps in our GitOps journey.

          ### What's Happening Here?

          - We're merging changes from `${{ steps.user_branch.outputs.USER_BRANCH }}` into the `${{ env.TRAIN }}` branch.
          - This is a critical step in our process, moving us closer to launching the Release Train.

          ### Next Steps: Launching and Opening the Doors

          - Once this PR is merged, we're set to **launch the Release Train**.
          - After the launch, our next goal is to **open the doors** of the Release Train, making these changes available in our release.

          ### :white_check_mark: Automatic Merging :white_check_mark:

          - This PR is designed to **automatically merge** once all CI checks pass.
          - The CI checks include our GitHub Actions workflows and RTD integration.

          ### :warning: A Note to Maintainers :warning:

          - Please **do not close this PR manually**.
          - If there are any issues or required manual interventions, reach out to the development team.
          "

      ############## Merge ##############
      - name: 'Merge PR   ${{ env.BOARDING }}  -->  ${{ env.TRAIN }}'
        run: gh pr merge "${{ env.BOARDING }}" --auto --delete-branch --squash
        # HEAD is now at ${{ env.TRAIN }}


      ## DONE ##
