############################
## Merge Train in Release ##
############################

name: Merge RT in Release

# WHEN a PR --> 'release-train' is merged, from branches
#  - test-distro
#  - test-docs
#  - test-distro-docs
#  - direct-onboarding

# OR

# WHEN a tag 'start-train' is pushed t branch 'release-train'

# THEN
#   1. Open PR: 'release-train' --> 'release'
#   2. Enable PR "Auto Merge"

on:
  push:
    tags:
      - start-train
  pull_request:
    # When a pull request merges, the pull request is automatically closed.
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-pull_request-workflow-when-a-pull-request-merges
    types: [closed]
    branches:  # ALLOWED Base Branches
      - release-train
env:
  TRAIN: 'release-train'   # MUST match value from above: on.pull_request.branches.0

jobs:
  # RUN Job when 'sth' --> 'release-train' PR is merged
  merge_rt_in_release:
    ## IMPORTANT: below head branches should be in sync with Protection Rules
    if: (github.event.pull_request.merged == true && contains(fromJSON('["test-distro", "test-docs", "test-distro-docs", "direct-onboarding"]'), github.head_ref)) || (github.event_name == 'push' && github.ref == 'refs/tags/start-train')

    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MAIN_BR: 'master'
      RELEASE_BR: 'release'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 0 indicates all history for all branches and tags.
          set-safe-directory: ''  # `git config --global --add safe.directory <path>`
          token: '${{ secrets.GH_TOKEN }}'
      # track remote master, since this Workflow triggers on push tag or pull request activity
      - name: Track Remote Master
        run: git branch --track "${{ env.MAIN_BR }}" "origin/${{ env.MAIN_BR }}"

      - name: Ensure Release Branch exists and is rebased on Main Branch, before PR
        run: |
          (git branch --track "${{ env.RELEASE_BR }}" "origin/${{ env.RELEASE_BR }}" && git rebase ${{ env.MAIN_BR }} && git push) || echo "Branch '${{ env.RELEASE_BR }}' does NOT exist in remote Origin"
          git checkout ${{ env.RELEASE_BR }} || (git checkout -b ${{ env.RELEASE_BR }} ${{ env.MAIN_BR }} && git push origin -u ${{ env.RELEASE_BR }})

      # if triggered by pushed tag then make sure tag was pushed to release-train
      - name: "Find whether '${{ github.ref }}' tag is on '${{ env.TRAIN }}' branch"
        if: github.event_name == 'push'
        uses: rickstaa/action-contains-tag@v1
        id: tag_on_release_train
        with:
          reference: ${{ env.TRAIN }}
          tag: "${{ github.ref }}"

      - name: Abort if pushed tag in NOT on '${{ env.TRAIN }}' branch
        if: github.event_name == 'push' && steps.tag_on_release_train.outputs.retval != 'true'
        run: |
            echo "[ERROR] Tag '${{ github.ref }}' was pushed, but not on '${{ env.TRAIN }}' branch. Aborting Workflow.."
            exit 1

      ####### PR: Train --> Release #######
      - name: "Create PR  'head': ${{ env.TRAIN }}  -->  'base': ${{ env.RELEASE_BR }}"
        run: |
          gh pr create --head "${{ env.TRAIN }}" --base "${{ env.RELEASE_BR }}" \
            --title "Initiate Release Process - Merging '${{ env.TRAIN }}' in '${{ env.RELEASE_BR }}'" \
            --body "## :rocket: Initiating Release Process :rocket:

            This PR marks a pivotal moment in our deployment cycle, signaling that all changes on the **Release Train (RT)** are deemed ready for release. It represents the collective decision of our developers that the changes bundled in the RT are suitable to be released together.

            ### What's Happening in This PR?

            - We are merging the `${{ env.TRAIN }}` branch into the `${{ env.RELEASE_BR }}` branch.
            - This action is a critical step, transitioning us from the development phase to the release phase.

            ### :white_check_mark: Automatic Merging Upon CI Checks :white_check_mark:

            - This PR is configured to **automatically merge** once all CI checks successfully pass.
            - These checks include running our comprehensive test suite on the RT branch to ensure a minimum standard of quality, covering sanity checks, QA, and unit tests.

            ### Ensuring Quality and Preparing for Release:

            - Our focus now shifts to **stress testing** and executing a CI job matrix to rigorously evaluate our changes under varied conditions.
            - We'll also handle essential chores, like **semantic versioning bumps** across source/distribution files and updating the changelog with details of the imminent release.

            ### :bulb: Next Steps in Our Journey:

            - Following the successful merge of this PR, we'll initiate the next phase, which involves merging the `${{ env.RELEASE_BR }}` into the **Main/Master** branch.
            - This next PR will continue the narrative we're building here, ensuring a smooth transition and a consistent story from development to final release.

            ### :handshake: Collaborative Efforts:

            - Your reviews, insights, and contributions have brought us to this stage. Let's keep up the momentum as we move closer to our goal.
            - Please coordinate for any final adjustments or critical issues that need addressing before the merge.

            ### :hourglass_flowing_sand: Looking Ahead:

            - Once merged, our changes are set for the final stage of release preparation.
            - The team should be prepared to monitor and address any issues in the subsequent phase of merging into the Main/Master branch.
            "
      ##### Auto Merge: Train --> Release #####
      - name: 'Merge PR   ${{ env.TRAIN }}  -->  ${{ env.RELEASE_BR }}'
        run: gh pr merge "${{ env.TRAIN }}" --auto --delete-branch --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # allow event to trigger "listener" Workflows
