# CI Pipeline

# For Test Suite this pipeline aims for speed
# so for feature branches test is in edit mode
# for 'high' branches (ie dev) runs sdist/wheel tests

name: CI Pipeline
# primarily serves as quick feedback on every push
# on feature-branches, should be as quick as possible
# runs only tests, type check, docs build dynamically based on changes

on:
  push:
    branches:
      - '*'
      # except main, dev, release, branches
      - '!main'
      - '!dev'
      - '!release'
      - '!try-ci'

jobs:

  ### FASTER JOBS ###

  # INSTALL PACKAGE in Edit mode and run Test Suite against it
  code:  ## Unless override, default trigger 'always'
    uses: ./.github/workflows/test-python.yml
    with:
      default_trigger: true
      override: '${{ vars.OV_TEST_UNIT }}'
      installation_mode: 'edit'
      python_version: '3.10'
      platform: 'ubuntu-latest'

  # Build PACKAGE SDist and run Test Suite against it
  sdist:  ## Unless override, default trigger 'always'
    uses: ./.github/workflows/test-python.yml
    with:
      default_trigger: false
      override: '${{ vars.OV_SDIST }}'
      installation_mode: 'sdist'
      python_version: '3.10'
      platform: 'ubuntu-latest'

  # BUILD PACKAGE Wheel and run Tests Suite against it
  wheel:  ## Unless override, default trigger 'always'
    uses: ./.github/workflows/test-python.yml
    with:
      default_trigger: true
      override: '${{ vars.OV_WHEEL }}'
      installation_mode: 'wheel'
      upload_distro: true
      python_version: '3.10'
      platform: 'ubuntu-latest'

  # BUILD ALL WHEELS and run Test Suite against them
  ## Unless override, default trigger 'always'
  all_wheels:
    if: vars.OV_ALL_WHEELS != 'false'  # Unless override, default trigger 'always'
    runs-on: ubuntu-latest
    env:
      module_name: cookiecutter_python
      # assuming project "declares" 1 python module (in the package)
      # assuming a pure-python package is being built (otherwise needs platform-specific path)!
      WHEEL_FILE: 'cookiecutter_python-*.whl'
    steps:
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - uses: actions/checkout@v4

      ## Build Wheel Distribution ##
      - name: 'Build Wheel Distribution for Package and its Dependencies'
        run: 'pip wheel --wheel-dir dist .'

        # --find-links dist --use-feature=fast-deps --use-feature=2020-resolver

        # run: uv build --wheel --all-packages --out-dir dist

      - run: mkdir module_wheel/
      - run: mv dist/${{ env.WHEEL_FILE }} module_wheel/

      - run: uv venv

      - run: uv pip install --no-deps dist/*.whl
      # - run: uv pip install --no-deps $(ls dist/*.whl)
      # - run: find dist -name "*.whl" -print0 | xargs -0 uv pip install --no-deps

      # here we need to manually extract the wheel file path, asserting there is only 1
      - name: Extract Module Wheel file path
        id: module_wheel_path
        run: echo "module_wheel_path=$(ls module_wheel/*.whl)" >> $GITHUB_OUTPUT

      - name: Install module wheel and download test extras from pypi
        run: uv pip install "${{ steps.module_wheel_path.outputs.module_wheel_path }}[test]"

      # TODO: use pinned test deps, instead of "rolling" the test deps as done above

      # Install Prod Wheels
      # - name: 'Install "Prod Wheels and leverage "extras" to install test deps'
      #   run: uv pip install --no-deps "dist/*.whl[test]"

      # Run tests
      - name: 'Run tests'
        run: uv run pytest -ra -n auto

  # STATIC CODE ANALYSIS: mypy, ruff, isort, black, bandit, mccabe, prospector, etc
  ## Unless override, default trigger is (only) on PR to dev
  sca:
    # Unless override, default trigger is (only) on PR to dev
    if: vars.OV_SCA == 'true' || (vars.OV_SCA != 'false' && github.event_name == 'pull_request' && github.base_ref == 'dev')
    uses: ./.github/workflows/sca-job.yml
    with:
      python_version: '3.10'
      allow_failure: ${{ github.event_name != 'pull_request' || github.base_ref != 'dev' }}
      force_styles: ${{ github.event_name == 'pull_request' && github.base_ref == 'dev' }}
      bandit: '{"h": 1, "m": 2, "l": 4}'  # Automated Acceptance Criteria for Bandit

  # RUN INTEGRATION TESTS: slower due to automated installations involved via pip
  ## Unless override, default trigger is (only) on PR to dev
  test_integration:
    if: always() || vars.OV_TEST_INTEGRATION == 'true' || (vars.OV_SCA != 'false' && github.event_name == 'pull_request' && github.base_ref == 'dev')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Install uv to manage pinned versions
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      # Export "pinned" (exact) dependencies' versions in requirements.txt format
      - name: 'Export pinned Prod + Test dependencies'
        run: uv export --no-emit-project --no-dev --extra test --frozen --format requirements-txt -o requirements.txt

      - run: uv venv

      # Install dependencies in virtualenv
      - name: 'Install "Prod + Test" dependencies'
        run: uv pip install -r requirements.txt

      # here the .venv is built with the exact dependencies

      # Install Package (without dependencies)
      - name: 'Install Package without dependencies'
        run: uv pip install --no-deps -e .

      # Run Integration tests
      - name: 'Run Integration tests'
        run: |
          # leverage uv to install other runtime test dependencies in the system site-packages!

          uv pip install 'tox<4.0'  # integration tests dependency

          # Isolate flaky tests
          uv run pytest -ra -vvs --run-slow -k via_build_module
          uv run pytest -ra -vvs --run-slow -k test_build_creates_artifacts

          # Run eveything once again for sanity
          uv run pytest -ra -n auto --run-requires_uv --run-slow --run-network_bound -vvs -k 'test_cli or build_backend_sdist or test_build_creates_artifacts or test_lint_passes'

  # CROSS PLATFORM TESTING: 15s on Ubuntu, 25 on mac, 35 on windows
  ## Unless override, default trigger is (only) on PR to dev
  sample_matrix_test:
    if: vars.OV_MATRIX_TEST == 'true' || (vars.OV_MATRIX_TEST != 'false' && github.event_name == 'pull_request' && github.base_ref == 'dev')
    runs-on: ${{ matrix.platform }}
    # trigger if event is pr to dev
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        # platform: [windows-latest]
        python-version: ['3.10']
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        if: matrix.platform != 'windows-latest'
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install the latest version of uv
        if: matrix.platform == 'windows-latest'
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - uses: actions/checkout@v4

      # Build Package Wheel
      - run: uv build --wheel --out-dir dist

      # Install exact Prod + Test dependencies
      - name: 'Export pinned Prod + Test dependencies'
        run: uv export --no-emit-project --no-dev --extra test --frozen --format requirements-txt -o requirements.txt

      - name: Install dependencies
        run: |
          uv venv
          uv pip install --no-deps -r requirements.txt

      # Install the Package Wheel
      - name: Install our Package Wheel
        shell: bash
        run: uv pip install --no-deps dist/*.whl

      # Run tests
      - name: Run tests
        shell: bash
        env:
          # log deletion post hook fails on windows, due to permission error! (other process is using the file, so removing is denied)
          # windows spawn multiple processes, so log deletion is not possible, even when running 1 Single Unit Test
          BUG_LOG_DEL_WIN: 'permission_error'  # required on Windows Job
          PY_WHEEL: 1 # required on Windows Job
        run: |
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            echo "[INFO] Activating virtual environment for Windows"
            . .venv/Scripts/activate
          else
            # Linux and MacOS
            echo "[INFO] Activating virtual environment for Linux/MacOS"
            . .venv/bin/activate
          fi
          pytest -ra --run-requires_uv --run-network_bound -vvs -k 'context_with_expected_values[gold_standard]'

## PYDEPS

## TYPE CHECK

## DOCS
