# BUILD

[build-system]
{% if cookiecutter.project_type == "pytest-plugin" %}requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
{% else %}requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Poetry

# Information required for building (sdist/wheel)
## Also renders on pypi as 'subtitle'
[tool.poetry]
name = "{{ cookiecutter.pkg_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = ["{{ cookiecutter.full_name }} <{{ cookiecutter.author_email }}>"]
maintainers = ["{{ cookiecutter.full_name }} <{{ cookiecutter.author_email }}>"]
license = "AGPL-3.0-only"
readme = "README.rst"

homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}"
repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}"
documentation = "https://{{ cookiecutter.repo_name }}.readthedocs.io/"

keywords = [
    "python package",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Natural Language :: English",
    "Operating System :: Unix",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Software Distribution",
    "Typing :: Typed"
]

packages = [
    { include = "{{ cookiecutter.pkg_name }}", from = "src" },
]

include = [
    { path = "tests", format = "sdist" },
    { path = "docs/**/*.rst", format = "sdist" },
    { path = "docs/conf.py", format = "sdist" },
    { path = "src/**/*.typed", format = "sdist" },
    { path = "src/stubs/*.pyi", format = "sdist" },
    "pyproject.toml",
    "LICENSE",
    "README.rst",
    "CONTRIBUTING.md",
    "CHANGELOG.rst",
]

exclude = [
    "docs/*",
    "requirements/*",
    "scripts/*.py",
    "tox.ini",
    ".circleci/config.yml",
    ".coveragerc",
    ".DS_Store",
    ".gitignore",
    ".prospector.yml",
    ".pylintrc",
    ".readthedocs.yml",
    ".scrutinizer.yml",
    ".travis.yml"
]

# PyPi url links, that appear in 'Project Links' section
[tool.poetry.urls]
"Bug Tracker" = "https://github.com/{{ cookiecutter.repo_name }}/issues"
"CI: Github Actions" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}/actions"
"Documentation" = "https://{{ cookiecutter.repo_name }}.readthedocs.io/"
"Source Code" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}"
"Changelog" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}/blob/master/CHANGELOG.rst"
"Code of Conduct" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}/blob/master/CONTRIBUTING.rst"
{% endif %}

# Caret requirements allow SemVer compatible updates to a specified version. An update is allowed if the new version number does not modify the left-most non-zero digit in the major, minor, patch grouping. For instance, if we previously ran poetry add requests@^2.13.0 and wanted to update the library and ran poetry update requests, poetry would update us to version 2.14.0 if it was available, but would not update us to 3.0.0. If instead we had specified the version string as ^0.1.13, poetry would update to 0.1.14 but not 0.2.0. 0.0.x is not considered compatible with any other version.
# REQUIREMENT  VERSIONS ALLOWED
# ^1.2.3	   >=1.2.3 <2.0.0
# ^1.2	       >=1.2.0 <2.0.0
# ^1	       >=1.0.0 <2.0.0
# ^0.2.3	   >=0.2.3 <0.3.0
# ^0.0.3	   >=0.0.3 <0.0.4
# ^0.0	       >=0.0.0 <0.1.0
# ^0	       >=0.0.0 <1.0.0
# "~" is the more conservative compared to "^"
# Tilde requirements specify a minimal version with some ability to update. If you specify a major, minor, and patch version or only a major and minor version, only patch-level changes are allowed. If you only specify a major version, then minor- and patch-level changes are allowed.
# REQUIREMENT  VERSIONS ALLOWED
# ~1.2.3	   >=1.2.3 <1.3.0
# ~1.2	       >=1.2.0 <1.3.0
# ~1	       >=1.0.0 <2.0.0


### Dependency Constraints, aka Requirements ###
[tool.poetry.dependencies]
python = ">=3.8, <3.13"

# Test: packages imported in test code and packages required for the "test runner"
pytest = { version = "^8.0.0", optional = true }
pytest-cov = { version = "^4.1.0", optional = true }
pytest-explicit = { version = "^1.0.1", optional = true }
pytest-xdist = { version = "^3.5.0", optional = true }{% if cookiecutter.project_type == "module+cli" %}
pytest-click = { version = "^1.1.0", optional = true }
pytest-run-subprocess = { version = "^0.10.0", optional = true }{% endif %}

# Type Checking
mypy = { version = "^1.8.0", optional = true }

# Docs: dev and build dependencies{% if cookiecutter.docs_builder == "sphinx" %}
sphinx = { version = "~4", optional = true }
sphinx-autodoc-typehints = { version = ">= 1.10", optional = true }
sphinx-rtd-theme = { version = "== 0.5.0", optional = true }
sphinxcontrib-spelling = { version = "~= 7.3.3", optional = true }
sphinx-autobuild = { version = "^2021.3.14", optional = true }
sphinx-inline-tabs = { version = "^2023.4.21", optional = true, python = ">=3.8,<3.13" }
sphinxcontrib-mermaid = { version = "^0.9.2", optional = true, python = ">=3.7,<3.13" }{% elif cookiecutter.docs_builder == "mkdocs" %}
mkdocs = { version = "^1.5.3", optional = true }
mkdocs-macros-plugin = { version = "^1.0.5", optional = true }
mkdocs-material = { version = "^9.4.14", optional = true }
mkdocs-mermaid2-plugin = { version = "^1.1.1", optional = true }
mkdocs-section-index = { version = "^0.3.8", optional = true }
mkdocs-gen-files = { version = "^0.5.0", optional = true }
mkdocstrings = { version = "^0.24.0", optional = true }
mkdocstrings-python = { version = "^1.7.5", optional = true }
mkdocs-literate-nav = { version = "^0.6.1", optional = true }
pymdown-extensions = { version = "^10.5", optional = true }{% if cookiecutter.project_type == "module+cli" %}
mkdocs-click = { version = "^0.8.1", optional = true }{% endif %}{% endif %}

### EXTRAS ###
[tool.poetry.extras]
test = [
    "pytest",
    "pytest-cov",
    "pytest-explicit",
    "pytest-xdist",{% if cookiecutter.project_type == "module+cli" %}
    "pytest-click",
    "pytest-run-subprocess",{% endif %}
]
typing = [
    "mypy",
    "types-requests",
    "pytest",{% if cookiecutter.project_type == "module+cli" %}
    "pytest-click",{% endif %}
]
docs = [{% if cookiecutter.docs_builder == "sphinx" %}
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-rtd-theme",
    "sphinxcontrib-spelling",
    "sphinx-inline-tabs",
    "sphinxcontrib-mermaid",{% elif cookiecutter.docs_builder == "mkdocs" %}
    "mkdocs",
    "mkdocs-macros-plugin",
    "mkdocs-material",
    "mkdocs-mermaid2-plugin",
    "mkdocs-section-index",
    "mkdocs-gen-files",
    "mkdocstrings",
    "mkdocstrings-python",
    "mkdocs-literate-nav",
    "pymdown-extensions",{% if cookiecutter.project_type == "module+cli" %}
    "mkdocs-click",{% endif %}{% endif %}
]{% if cookiecutter.docs_builder == "sphinx" %}
docslive = [
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-rtd-theme",
    "sphinxcontrib-spelling",
    "sphinx-inline-tabs",
    "sphinxcontrib-mermaid",
    "sphinx-autobuild",
]{% endif %}{% if cookiecutter.project_type == "module+cli" %}

[tool.poetry.scripts]
{{ cookiecutter.pkg_name|replace('_', '-') }} = '{{ cookiecutter.pkg_name }}.cli:main'{% endif %}

[tool.poetry.plugins."poetry.application.plugin"]
export = "poetry_plugin_export.plugins:ExportApplicationPlugin"

# TOOLS
[tool.pytest.ini_options]
minversion = "6.2"
addopts = "--strict-markers"
markers = [
    "slow: Marks a slow test",
    "integration: Integration Tests",
    "network_bound: Require internet connection",
]
testpaths = [
    "tests",
]
explicit-only = [
    "integration",
    "network_bound",
]

[tool.black]
line-length = 95
include = '\.pyi?$'
extend-exclude = '''
'''

[tool.isort]
profile = 'black'

[tool.bandit]
tests = []
skips = [
    "B101",
]

[tool.software-release]
version_variable = "src/{{ cookiecutter.pkg_name }}/__init__.py:__version__"
